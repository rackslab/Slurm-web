#!/usr/bin/env python3
#
# Copyright (c) 2024 Rackslab
#
# This file is part of Slurm-web.
#
# SPDX-License-Identifier: GPL-3.0-or-later

from pathlib import Path
import sys
import getpass
import logging


from rfl.log import setup_logger

from crawler.lib import (
    load_settings,
    DevelopmentHostClient,
    DevelopmentHostConnectionError,
)
from crawler.slurmrestd import crawl_slurmrestd
from crawler.agent import crawl_agent
from crawler.gateway import crawl_gateway
from crawler.prometheus import crawl_prometheus

from racksdb import RacksDB
from slurmweb.slurmrestd.auth import SlurmrestdAuthentifier

logger = logging.getLogger("crawl-tests-assets")

DEBUG_FLAGS = ["slurmweb", "rfl", "werkzeug", "urllib3"]
DEV_HOST = "firehpc.dev.rackslab.io"
USER = getpass.getuser()
METRICS_PREFERRED_CLUSTER = "emulator"
# Map between infrastructure names and cluster names that are visible in Slurm-web.
MAP_CLUSTER_NAMES = {"emulator": "atlas"}


def slurmweb_cluster_name(infrastructure: str):
    if infrastructure in MAP_CLUSTER_NAMES:
        return MAP_CLUSTER_NAMES[infrastructure]
    return infrastructure


def main() -> None:
    """Crawl and save test assets from Slurm-web gateway, agent and slurmrestd."""

    # Setup logger
    setup_logger(
        debug=True,
        log_flags=["ALL"],
        debug_flags=DEBUG_FLAGS,
    )

    # Search for slurm-web development environment temporary directory
    dev_tmp_dirs = list(Path("/tmp").glob("slurm-web-*"))
    try:
        assert len(dev_tmp_dirs) == 1
    except AssertionError:
        logger.error(
            "Unexpectedly found %d Slurm-web development temporary directories",
            len(dev_tmp_dirs),
        )
        sys.exit(1)
    dev_tmp_dir = dev_tmp_dirs[0]
    logger.info(
        "Slurm-web development environment temporary directory: %s", dev_tmp_dir
    )

    # Load cluster list from RacksDB database
    db = RacksDB.load(db="dev/firehpc/db", schema="../RacksDB/schemas/racksdb.yml")
    logger.info("List of clusters: %s", db.infrastructures.keys())

    gateway_infrastructure = list(
        db.infrastructures.filter(name=METRICS_PREFERRED_CLUSTER)
    )[0].name

    dev_host = DevelopmentHostClient(DEV_HOST, USER)
    try:
        dev_host.connect()
    except DevelopmentHostConnectionError as err:
        logger.error(err)
        sys.exit(1)

    # Crawl gateway and get bearer token
    token = crawl_gateway(
        dev_host,
        slurmweb_cluster_name(gateway_infrastructure),
        gateway_infrastructure,
        dev_tmp_dir,
    )

    for cluster in db.infrastructures.keys():
        # Load agent configuration
        settings = load_settings(
            "conf/vendor/agent.yml", dev_tmp_dir, f"agent-{cluster}.ini"
        )
        crawl_metrics = cluster == METRICS_PREFERRED_CLUSTER

        # Crawl agent
        crawl_agent(settings.service.port, token, metrics=crawl_metrics)

        # Crawl prometheus
        if crawl_metrics:
            crawl_prometheus(settings.metrics.host.geturl(), settings.metrics.job)

        auth = SlurmrestdAuthentifier(
            settings.slurmrestd.auth,
            settings.slurmrestd.jwt_mode,
            settings.slurmrestd.jwt_user,
            settings.slurmrestd.jwt_key,
            settings.slurmrestd.jwt_lifespan,
            settings.slurmrestd.jwt_token,
        )

        # Crawl slurmrestd
        try:
            crawl_slurmrestd(settings.slurmrestd.uri, auth)
        except RuntimeError as err:
            logger.error(
                "Unable to crawl slurmrestd data from cluster %s: %s", cluster, err
            )


if __name__ == "__main__":
    main()
